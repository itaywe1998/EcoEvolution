index <- 2 # keep track of which column we are naming with this counter
for (k in 1:pars$L) {
for (i in 1:pars$S) { # name columns for densities
names(dat)[index] <- paste0("n_", i, "_", k) # naming convention:
index <- index + 1 # "type_species_patch" - type is either m (trait),
} # or n (density)
}
for (k in 1:pars$L) {
for (i in 1:pars$S) { # name columns for trait values
names(dat)[index] <- paste0("m_", i, "_", k) # (same naming convention)
index <- index + 1
}
}
dat %>%
# normalize table by collapsing columns into a key-value column pair
pivot_longer(cols=2:ncol(.), names_to="variable", values_to="v") %>%
# split "variable" into value type (density or trait), species, and patch
separate(variable, c("type", "species", "patch"), sep="_") %>%
# convert species & patch from string ("1","2",...) to integer (1,2,...)
mutate(species=as.integer(species), patch=as.integer(patch)) %>%
# split trait and abundance values into two columns
pivot_wider(names_from="type", values_from="v") %>%
# trophic level (tl): species with index greater than SR are consumers ("C"),
# the rest are resources ("R")
mutate(tl=ifelse(species>SR, "C", "R")) %>%
# return tidy table
return()
}
# ------------------------------- parameters -----------------------------------
# number of species and number of patches----
SR <- S # number of resource species
SC <- 0 # number of consumer species: 0, unless we have...
if (model %in% c("trophic", "Tdep_trophic")) SC <- S # ...consumer species
S <- SR + SC # set S to be the total number of species
L <- 20 # number of patches
# scalars----
set.seed(seed) # set random seed for reproducibility
v <- runif(SR, 1.0*vbar, 2.0*vbar) # resource genetic variances
d <- runif(SR, 1.0*dbar, 2.0*dbar) # resource dispersal rates
kappa <- 0.1 # intrinsic mortality parameter
venv <- vbar # environmental variance
vmat <- matrix(rep(v, L), S, L) # genetic variances at each patch
s <- v + venv # species' total phenotypic variances
eta <- 1 # competition width (centigrade; only for Tdep and Tdep_trophic)
eps <- c(rep(0, SR), rep(0.3, SC)) # feeding efficiency of consumers
nmin <- 1e-5 # below this threshold density, genetic variances are reduced
aw <- 0.1 # (negative) slope of trait-dependence of tolerance width
bw <- 4 # intercept of trait-dependence of tolerance width
Tmax <- 25.0 # initial mean temperature at equator
Tmin <- Tmax-40 # initial mean temperature at poles
save.image(file = workspace)
# matrices----
rho <- runif(SR, 0.1, 11) # resource growth-tolerance tradeoff parameter
a <- matrix(0, S, S) # initialize full competition matrix (resources+consumers)
# assigned 0.7 & 0.9 instead of 0.5 & 1.5 as margins in aP, to lower competition
aP <- matrix(runif(SR*SR, 0.15*0.4, 0.15*0.9), SR, SR) # resource comp coeffs
diag(aP) <- runif(SR, 0.2*0.4, 0.2*0.9) # resource intraspecific comp coeffs
a[1:SR,1:SR] <- aP # top left block: resources
W <- matrix(0, S, S) # create feeding network: nothing if no consumers
Th <- rep(1, S) # handling times in type II f.r. (dummy value if no consumers)
arate <- rep(1, S) # attack rates in type II f.r. (dummy value if no consumers)
if (model %in% c("trophic", "Tdep_trophic")) {
v <- c(v, runif(SC, 0.5*vbar, 1.5*vbar)) # add consumer genetic variances
d <- c(d, runif(SC, 0.1*dbar, 10.0*dbar)) # add consumer dispersal rates
rho <- c(rho, runif(SC, 0.9*0.1, 1.1*0.1)) # add consumer tradeoff parameters
aH <- matrix(0, SC, SC) # initialize competition matrix (consumers)
a[(SR+1):S,(SR+1):S] <- aH # bottom right: consumers
W <- generate_network(SR, SC) # trophic feeding network
Th[(SR+1):S] <- runif(S-SR, 0.5, 1) # handling times in type II f.r.
arate[(SR+1):S] <- runif(S-SR, 1, 10) # attack rates in type II f.r.
}
# dispersal matrix----
mig <- matrix(0, L, L) # initialize dispersal matrix
for (k in 2:L) mig[k-1,k] <- 1 # each species can only migrate to the two
mig <- mig + t(mig) # nearest-neighbor patches
# initial conditions----
ninit <- matrix(0, S, L) # reserve memory for initial densities
muinit <- matrix(seq(Tmin, Tmin, l=SR), SR, L) # initial trait means
# Edit ! all initial species start with same location controlled de-facto by muninit
# initial temperatures
Tempinit <- Temp(seq(from=0, to=1, l=L), 0, tE, Cmax, Cmin, Tmax, Tmin, periodic, cycles, updown)
for (i in 1:SR) ninit[i,] <- exp(-(muinit[i,1]-Tempinit)^2/(2*2^2))
# initial traits and densities for consumers
if (model %in% c("trophic", "Tdep_trophic")) {
muinit <- rbind(muinit, matrix(seq(Tmin, Tmin, l=SC), SC, L))
for (i in (SR+1):S) ninit[i,] <- exp(-(muinit[i,1]-Tempinit)^2/(2*2^2))
}
ic <- c(ninit, muinit) # merge initial conditions into a vector
# coerce parameters into a list----
pars <- list(SR=SR, SC=SC, S=S, L=L, rho=rho, kappa=kappa, a=a, eta=eta,
eps=eps, W=W, venv=venv, vmat=vmat, s=s, nmin=nmin, aw=aw, bw=bw,
Tmax=Tmax, Tmin=Tmin, Th=Th, arate=arate, Cmax=Cmax, Cmin=Cmin,
tE=tE, d=d, mig=mig, model=model, periodic=periodic, cycles=cycles, updown=updown)
# --------------------------- integrate ODEs -----------------------------------
#consider changing rtol and atol
at <-1e-10
rt <-1e-10
before_step <- -tstart/1000
tryCatch({before_cc <-ode(y=ic, times=seq(tstart, 0, by=before_step), func=eqs, parms=pars,
method="bdf", atol  = at, rtol = rt, maxsteps = 10000)},
error=function(e){message("All Species Extinct")
return(NA)}) # integrate ODEs before climate change starts
diagnostics(before_cc)
ic <- as.numeric(before_cc[nrow(before_cc),-1]) # final state -> new initial cond.
before_cc <- before_cc %>% # put before-climate-change solution into tidy tibble:
organize_data(times=seq(from=tstart, to=0, by=before_step), pars = pars) %>%
filter(time!=0) # remove time point 0 (will be starting point of during_cc)
print("Before CC")
print(Sys.time()-start)
during_step <- tE/200
at <-1e-12
rt <-1e-12
fail_time <- 0
original_tE <- tE
tryCatch({during_cc <-ode(y=ic, times=seq(0, tE, by=during_step), func=eqs, parms=pars,
method = "bdf",atol  = at, rtol = rt, maxsteps = 10000)},
error=function(fail_time){
message("All Species Extinct")
fail_time<<-as.numeric(fail_time$message)},
finally = {
if (fail_time > 0) {
outfile <<- paste(outfile,"_FAILED",sep="")
unlink(workspace) # Deleting old name workspace
workspace <<- paste(workspace,"_FAILED",sep="")
save.image(file = workspace)
during_step <<- 1000
tE <<-floor((fail_time-during_step)/during_step) * during_step #alternative for round_any
# if needed in another place will move to a function
during_cc <-ode(y=ic, times=seq(0, tE, by=during_step), func=eqs, parms=pars,
method = "bdf",atol  = at, rtol = rt, maxsteps = 10000)
}
diagnostics(during_cc)
during_cc <- during_cc %>% # put during-climate-change solution into tidy tibble:
organize_data(times=seq(from=0, to=tE, by=during_step), pars = pars) #%>%
# merge data from before, during, and after climate change
dat <- bind_rows(before_cc, during_cc) %>%
# add replicate, genetic var., dispersal rate, and structure as new columns
mutate(replicate=replicate, vbar=vbar, dbar=dbar, model=model) %>%
# merge average genetic variance and dispersal into a single column
mutate(parameterization=paste0("V=", vbar, " d=", dbar)) %>%
# create regions
mutate(region=case_when(
(patch<=round(max(patch)/3))   ~ "polar", # top third of patches are "polar"
(patch>=round(2*max(patch)/3)) ~ "tropical", # bottom third are "tropical"
TRUE                           ~ "temperate")) # the rest are "temperate"
})  # integrate from start to end of climate change
# --------------------------- generate output ----------------------------------
print(original_tE-max(during_cc$time))
temp <-(during_cc %>% filter(time %in% c(max(during_cc$time))))
print(mean(temp$n))
#print(min(dat$time[dat$n < 0]))
req_times <- seq(from=0,to=tE,l=2*cycles+1)
obs_times <- seq(from=0,to=2*cycles)
for (i in seq(from=1,to=2*cycles+1)) {
obs_times[i] <-during_cc$time[which.min(abs(during_cc$time - req_times[i]))]
}
if(mean(temp$n) > 0){ # if ode converged till final time and no significant negative n
if (outfile!="") { # if data file to save to was not specified as empty (""):
suppressWarnings(write_csv(dat, path=outfile)) }# save data to specified file
plot_timeseries(dat %>% filter(time %in% c(tstart,tstart+before_step, obs_times)))
#plot_timeseries(dat %>% filter(time %in% c(tstart,tstart+200*before_step,
#                                          tstart+400*before_step,tstart+600*before_step,tstart+800*before_step,0)))
}
print("Final Runtime")
print(Sys.time()-start)
mig <- matrix(0, L, L) # initialize dispersal matrix
L <- 20 # number of patches
mig <- matrix(0, L, L) # initialize dispersal matrix
for (k in 2:L) mig[k-1,k] <- 1 # each species can only migrate to the two
mig <- mig + t(mig) # nearest-neighbor patches
print(mig)
View(mig)
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 149597870700 # m
Lsun <- 3.846e26 # W
d <- 1.0 * AU
L <- 1.0 * Lsun
sigma <- 5.670373e-8 # Stephan-Boltzman constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
T <- (L*(1-a)/(16*sigma*pi*d^2))^(1/4) + T0
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
lyr_to_AU <- function(l){
return(l*63241)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
what <- mas_to_dist(1.4, lyr_to_AU(150))
#----- Distance to Temperature ----------
AU <- 149597870700 # m
Lsun <- 3.846e26 # W
d <- 1.0 * AU
L <- 1.0 * Lsun
sigma <- 5.670373e-8 # Stephan-Boltzman constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
T <- (L*(1-a)/(16*sigma*pi*d^2))^(1/4) + T0
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms
m2 <- 0.089 * Ms
m3 <- 17.9 * Mj
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Lsun
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms # G-type primary star
m2 <- 0.089 * Ms # brown dwarf companion
m3 <- 17.9 * Mj # planet
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Lsun
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms # G-type primary star
m2 <- 0.089 * Ms # brown dwarf companion
m3 <- 17.9 * Mj # planet
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Ls
sigma <- 5.670373e-8 # Stephan-Boltzmann constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
e <- 0
E <- (L*(1-a)/(16*sigma*pi*d^2))*(1-e^2)^(-0.5) # energy per area per time
T <- (E)^(1/4) + T0
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms # G-type primary star
m2 <- 0.089 * Ms # brown dwarf companion
m3 <- 17.9 * Mj # planet
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Ls
sigma <- 5.670373e-8 # Stephan-Boltzmann constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
e <- 0.1
E <- (L*(1-a)/(16*sigma*pi*d^2))*(1-e^2)^(-0.5) # energy per area per time
T <- (E)^(1/4) + T0
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms # G-type primary star
m2 <- 0.089 * Ms # brown dwarf companion
m3 <- 17.9 * Mj # planet
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Ls
sigma <- 5.670373e-8 # Stephan-Boltzmann constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
e <- 0.9
E <- (L*(1-a)/(16*sigma*pi*d^2))*(1-e^2)^(-0.5) # energy per area per time
T <- (E)^(1/4) + T0
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms # G-type primary star
m2 <- 0.089 * Ms # brown dwarf companion
m3 <- 17.9 * Mj # planet
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Ls
sigma <- 5.670373e-8 # Stephan-Boltzmann constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
e <- 0.5
E <- (L*(1-a)/(16*sigma*pi*d^2))*(1-e^2)^(-0.5) # energy per area per time
T <- (E)^(1/4) + T0
suppressPackageStartupMessages({
suppressWarnings({
rm(list = ls())
start <- Sys.time()
require(deSolve) # solving ordinary differential equations (ODEs)
library(ggplot2)
})
})
AU <- 1.495978707e11 # m
Ls <- 3.846e26 # W
Ms <- 1.989e30 # kg
Mj <- 1.89813e27 # kg
lyr_to_AU <- function(l){
return(l*6.3241e4)
}
mas_to_dist <- function(angle, r){
p<-2*pi*r
as <- (p/360)/(60*60)
mas <- 1e-3 * as
return(angle*mas)
}
#---HD 202206 data ------
m1 <- 1.07 * Ms # G-type primary star
m2 <- 0.089 * Ms # brown dwarf companion
m3 <- 17.9 * Mj # planet
a1_mas <-1.4 #mas
d_system <-150 # lyr from sun
# 1 is for inner binary
a1 <- mas_to_dist(a1_mas, lyr_to_AU(d_system))
e1 <- 	0.432
i1 <- 10.9
# 2 is for outer planet (HD 202206-c)
a2 <- 2.41
e2 <- 0.22
i2 <- 7.7
#----- Distance to Temperature ----------
d <- 1.0 * AU
L <- 1.0 * Ls
sigma <- 5.670373e-8 # Stephan-Boltzmann constant [W m^-2 K^-4]
a <- 0.29 # Earth's Albedo
T0 <- -273.15 # Kelvin to Celsius conversion
e <- 0.7
E <- (L*(1-a)/(16*sigma*pi*d^2))*(1-e^2)^(-0.5) # energy per area per time
T <- (E)^(1/4) + T0
rel <- a2/a1
